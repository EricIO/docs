---
layout: user-guide
guide: 2
total_guides: 3
---
# 1 Introduction

## 1.2 The LFE REPL

### 1.2.1 Using the REPL

We covered basic REPL usage in the
<a href="http://lfe.github.com/quick-start/2.html">user guide</a>. That's the
best place to go for an introduction to using the LFE REPL. Regardless (and for
your convenience), we also provide some information about the REPL in the
document you are currently reading :-)

#### 1.2.1.1 Starting the REPL

If you have LFE installed system-wide, then starting the shell can be done in
the ways listed below.

Using the ```lfe``` command. Be sure to change directory to where you have
saved (or cloned) the LFE source code. Then:

    $ ./bin/lfe

You can also start the LFE REPL by passing options directly to ```erl```.
Again, assuming that you have LFE installed system-wide, from any directory you
may do this:

    $ erl -user lfe_boot

Also, if you happen to be running an Erlang shell already, you can start the
LFE REPL with the following:
{% highlight erlang %}
14> lfe_shell:start().
LFE Shell V5.9.3.1 (abort with ^G)
<0.33.0>

>
{% endhighlight %}

If you *don't* have LFE installed system-wide, you need to tell it (Erlang,
really) where the LFE ```.beam``` files are. Here are the three ways to start
up LFE in this case:

    $ ./bin/lfe -pa ./ebin

or:

    $ erl -user lfe_boot -pa /path/to/lfe/ebin

or:

    $ erl -pa /path/to/lfe/ebin

followed by this from the Erlang shell:
{% highlight erlang %}
14> lfe_shell:start().
LFE Shell V5.9.3.1 (abort with ^G)
<0.33.0>

>
{% endhighlight %}

#### 1.2.1.2 Running Commands

Once you're in the REPL, it's just a matter of entering code:
{% highlight cl %}
> (+ 1 2 3 4 5 6 7)
28
>
{% endhighlight %}

Note that you can't define modules, macros, functions or records from the REPL;
you'll have to put those in a module file and compile or ```slurp``` the file
from the REPL. You can, however, use ```lambda``` from the REPL:
{% highlight cl %}
> (set exp
    (lambda (x y)
      (trunc (: math pow x y))))
#Fun<lfe_eval.15.53503600>
> (funcall exp 2 6)
64
{% endhighlight %}

Or, if you want to get nuts:
{% highlight cl %}
> (: lists map
    (lambda (z)
      (funcall exp (car z) (cadr z)))
    (list (list 1 2) (list 3 4) (list 5 6)))
(1 81 15625)
>
{% endhighlight %}

#### 1.2.1.3 Quitting the REPL

Just as there are multiple ways in which you can start the REPL, there are a
couple ways you can leave it. You can jump into the JCL from the LFE prompt by
hitting ^g and then entering ```q```:
{% highlight cl %}
> ^g
User switch command
 --> q
 $
{% endhighlight %}

or you can call the Erlang shell's quit function:
{% highlight erlang %}
> (: c q)
ok
>
$
{% endhighlight %}

### 1.2.2 Special Functions

### 1.2.3 Special Commands

### 1.2.4 Getting Out of Trouble

Every once in a while you may find that you do something which causes the REPL
to crash, presenting you with something that looks like this:

    >
      =ERROR REPORT==== 17-Feb-2013::15:39:33 ===
      ...

You don't have to quit and restart the REPL, if you don't want to! There are a
couple of steps that you can take instead.

#### 1.2.4.1 Interrupting a Shell Process

When you get an error as seen above, type ```^g```. This will put you into JCL
(Job Control Language) mode. At the JCL prompt, type ```?``` to see a list of
options:

    User switch command
     --> ?
      c [nn]            - connect to job
      i [nn]            - interrupt job
      k [nn]            - kill job
      j                 - list all jobs
      s [shell]         - start local shell
      r [node [shell]]  - start remote shell
      q        - quit erlang
      ? | h             - this message

Let's see what's running:

    --> j
      1* {lfe_shell,start,[]}

Our shell process is still alive, though not responding. Let's interrupt it and
then connect to it again:

    --> i 1
    --> c 1
    exception error: function_clause
     in (: lists sublist #(error interrupted) 1)
     in (lfe_scan string 4)
     in (lfe_io scan_and_parse 3)

    >

Once we interrupted the job, our error messages were printed to the REPL and we
were placed back at the LFE prompt.

#### 1.2.4.2 Starting a New Shell

Sometimes, though, there is no shell process any more.  Here's how to start up
a new shell process if the one that you're using dies:

    --> s lfe_shell
    --> j
          2* {lfe_shell,start,[]}
    --> c 2
    LFE Shell V5.9.3.1 (abort with ^G)
    >

And you're back up!
