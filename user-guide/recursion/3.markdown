---
layout: user-guide
guide: 3
total_guides: 7
---
# 5 Recursion

## 5.5 Primitive Recursive Functions

In the previous section, we leaned about the primitive recursive funtion called
the "successor", one that was used by Peano in his axioms. There are other
primitive recursive funtions as well, and these are usually given as axioms
(i.e., without proof):
* the "zero function"
* the "projection function"
* "identity function"

These combined with the Peano axioms allow us to define other primitive
recursive functions.

### 5.5.1 Addition

Often, one sees the primitive recursive function definition of addition done in
the following manner:

    add(0, x) = x
    add(n + 1, x) = add(n, x) + 1

or:

    add(0, x) = x
    add(succ(n), x) = succ(add(n, x))

In LFE, we'd like to maintain symmetry with this... however, patterns don't
accept function calls (e.g., to ```(successor n)```). As such, we do a little
juggling instead:
{% highlight cl %}
(defun predecessor
  ((0) 0)
  ((n) (- n 1)))
{% endhighlight %}

Now, we can recast the canonical form above using the workaround of the
```predecessor``` primitive recursive function:
{% highlight cl %}
(defun add
  ((0 x) x)
  ((n x) (successor (add (predecessor n) x))))
{% endhighlight %}

All of this may seem rather absurb, given what we do in every-day programming.
Remember, though: the verbosity of these axioms and their derrived definitions
serves to explicitly show that no assumptions are being made and that all these
operations can indeed be built upon basic principles.

### 5.5.2 Subtraction

Next up, let's take a look at subtraction:

    sub(0, x) = x
    sub(pred(n), x) = pred(sub(n, x))

Similar to addition above, we make some adjustments for the convenience of
pattern matching:
{% highlight cl %}
(defun subtract
  ((0 x) x)
  ((n x) (predecessor (subtract (predecessor n) x))))
{% endhighlight %}

Note that the usual usage is reversed for our ```subtract``` function:
{% highlight cl %}
> (slurp '"prf.lfe")
#(ok prf)
> (subtract 1 100)
99
>
{% endhighlight %}

### 5.5.3 Multiplication

The last one of these that we will look at is multiplication, and then we'll
move on to something a little more complicated :-)

    mult(0, x) = 0
    mult(succ(n), x) = x + (x * n)

Again, using our pattern workaround:
{% highlight cl %}
(defun multiply
  ((0 x) 0)
  ((n x) (add x (multiply x (predecessor n)))))
{% endhighlight %}
