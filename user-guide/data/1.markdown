---
layout: user-guide
guide: 1
total_guides: 5
---
# 3 Lists and Simple Data

## 3.1 Lists

Lists in Erlang and LFE are straight-forward; those coming from another
programming language will not find anything surprising about them. Lists are
generally good for storing and iterating over data that is of a similar type.
There are other types one can use for more structured or complex data type
combos.

You can create lists in LFE in the following ways:
{% highlight cl %}
> (list 1 3 9 27)
(1 3 9 27)
> '(1 3 9 27)
(1 3 9 27)
> (== '(1 3 9 27) (list 1 3 9 27))
true
> (=:= '(1 3 9 27) (list 1 3 9 27))
true
>
{% endhighlight %}

Later, we will discuss Lisp-specific functions that have been implemented in
LFE, but this is a good time to mention a few classic functions:
{% highlight cl %}
> (car '(1 2 3 4 5 6))
1
> (cdr '(1 2 3 4 5 6))
(2 3 4 5 6)
> (cadr '(1 2 3 4 5 6))
2
> (cddr '(1 2 3 4 5 6))
(3 4 5 6)
> (cons '(1 2 3) '(4 5 6))
((1 2 3) 4 5 6)
>
{% endhighlight %}

There is an Erlang <a href="http://www.erlang.org/doc/man/lists.html">module
dedicated to handling lists</a> that we can take advantage of:
{% highlight cl %}
> (: lists append '(1 2) '(3 4))
(1 2 3 4)
> (: lists append (list '(1 2) '(3 4) '(5 6)))
(1 2 3 4 5 6)
>
{% endhighlight %}

You can also use the ```++``` operator to combine two lists:
{% highlight cl %}
> (++ '(1 2 3) '(4 5 6))
(1 2 3 4 5 6)
>
{% endhighlight %}

Here's a ```map``` example that generates the same list we manually created
above:
{% highlight cl %}
> (: lists map
    (lambda (x)
      (trunc
        (: math pow 3 x)))
    '(0 1 2 3))
(1 3 9 27)
>
{% endhighlight %}

Another one is ```filter```, but before we use it, let's first define a
predicate that returns ```true``` for even numbers:
{% highlight cl %}
> (set evenp
    (lambda (x)
      (== 0 (rem x 2))))
#Fun<lfe_eval.10.53503600>
>
{% endhighlight %}

Not let's try out ```filter``` with our new predicate:
{% highlight cl %}
> (: lists filter evenp '(1 2 3 4 5 6))
(2 4 6)
>
{% endhighlight %}

There are many, many more highly useful functions in the ```lists``` module --
be sure to give the docs a thorough reading, lest you miss something fun!

### 3.1.1 IOLists

There is another type of list that is used for such things as file and network
operations; it's called an ```IoList```. An ```IoList``` is a list whose
elements are either
* integers ranging from 0 to 255,
* binaries, or
* other ```IoList``s

Here's an example for you:
{% highlight cl %}
> (list '"hoopy" 42 #b("frood" 210) (list #b(42 84 126) 168 252))
("hoopy" 42 #B(102 114 111 111 100 210) (#B(42 84 126) 168 252))
>
{% endhighlight %}

You don't need to flatten ```IoList```s; they get passed as they are to the
various low-level functions that accept an ```IoList``` and Erlang will flatten
them efficiently for you.

We saw an example of this in a previous section when we were playing with
strings as binaries. We ended up calling a function that accepted an
```IoList``` as a parameter and this saved us from having to flatten the list
of binaries ourselves. If you recall, the ```data``` was a list of binaries:
{% highlight cl %}
> (: unicode characters_to_list
    (: binary split data (binary "who really knows ")))
"There's a frood where his towel is."
>
{% endhighlight %}

## 3.2 Tuples

Tuples are the data melting pot for Erlang: you can combine any of Erlang's
data types (including lists and other tuples) into a single composite data
type. This comes in very handy with pattern matching, but in general, makes
passing data around much easier.

Creating a tuple can be as simple as:
{% highlight cl %}
> (tuple)
#()
{% endhighlight %}

But perhaps more useful:
{% highlight cl %}
> (tuple 'odds '"5 to 1 against")
#(odds "5 to 1 against")
{% endhighlight %}

You could also have done this:
{% highlight cl %}
> #(odds "5 to 1 against")
#(odds "5 to 1 against")
{% endhighlight %}

Here's a simple data structure:
{% highlight cl %}
> (set data
    (tuple '|things to see|
      (list '"moons of Jaglan Beta"
            '"beaches of Santraginus V"
            '"desert world of Kakrafoon"
            '"heavy river Moth")))
#(|things to see|
  ("moons of Jaglan Beta"
   "beaches of Santraginus V"
   "desert world of Kakrafoon"
   "heavy river Moth"))
>
{% endhighlight %}

Now let's poke around at our new data structure:
{% highlight cl %}
> (: erlang tuple_size data)
2
> (: erlang element 1 data)
|things to see|
> (: erlang element 2 data)
("moons of Jaglan Beta"
 "beaches of Santraginus V"
 "desert world of Kakrafoon"
 "heavy river Moth")
>
{% endhighlight %}

{% highlight cl %}
{% endhighlight %}

{% highlight cl %}
{% endhighlight %}

{% highlight cl %}
{% endhighlight %}

{% highlight cl %}
{% endhighlight %}
