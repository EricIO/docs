---
layout: user-guide
guide: 4
total_guides: 5
---
# 3 Lists and Simple Data

## 3.4 Records

Sometimes lists, tuples, property lists, or hashes are not quite what is
needed. With tuples, you can't name keys (without awkward work-arounds), and
this makes working with large tuples rather cwcumbersome. Records are one way
around this.

A record is a data structure for storing a fixed number of elements. It has
named fields and LFE provides some convenience functions/macros for interacting
with them.

However, it is important to note that record expressions are translated to
tuple expressions during compilation. Due to this, record expressions are not
understood by the shell in both Erlang and LFE. The examples in this section,
therefore, will assume that you are saving the code to a file.

Let's start by defining a record. Save this in a file named ```record.lfe```:
{% highlight cl %}
(defmodule rec)

(defrecord person
  name
  address
  age)
{% endhighlight %}

Then load it up in the REPL:
{% highlight cl %}
> (slurp '"record.lfe")
#(ok rec)
>
{% endhighlight %}

Now let's create some people:
{% highlight cl %}
> (set ford
    (make-person name '"Ford Prefect"
                 address '"Betelgeuse Seven"
                 age 234))
#(person "Ford Prefect" "Betelgeuse Seven" 234)
> (set trillian
    (make-person name '"Tricia Marie McMillan"
                 age 60))
#(person "Tricia Marie McMillan" undefined 60)
>
{% endhighlight %}

Let's define a non-person, too:
{% highlight cl %}
> (set zaphod #("Zaphod Beeblebrox"))
#("Zaphod Beeblebrox")
>
{% endhighlight %}

Some quick checks:
{% highlight cl %}
> (is-person ford)
true
> (is-person zaphod)
false
>
{% endhighlight %}

If you remember working with the tuples, property lists, and dictionaries, then
you will enjoy the relative succinctness of the following usages:
{% highlight cl %}
> (person-name ford)
"Ford Prefect"
> (person-address ford)
"Betelgeuse Seven"
> (person-age ford)
234
>
{% endhighlight %}

Let's make some changes to our data:
{% highlight cl %}
> (set ford
    (set-person-age ford 244))
#(person "Ford Prefect" "Betelgeuse Seven" 244)
> (person-age ford)
244
>
{% endhighlight %}

Just as we saw with the ```dict``` examples, ```set-person-age``` doesn't
modify the data in-place, but rather returns a new record. If we want to use
that data in the future, we'll need to assign it to a variable (sensibly, we
re-use the ```ford``` variable here).

Also, note that there are also ```set-person-name``` and
```set-person-address```.

Additional convenience functions for records are provided by LFE, but some of
these will only make sense in the context of ETS (Erlang Term Storage), when
when the ability to store large amounts of data in memory becomes important.
Fear not, though -- this too we will cover in a dedicated section.
