---
layout: user-guide
guide: 2
total_guides: 5
---
# 3 Lists and Simple Data

## 3.2 List and Binary Comprehensions

In the section on lists, we gave an example of building a list using the
```map``` function:
{% highlight cl %}
> (: lists map
    (lambda (x)
      (trunc
        (: math pow 3 x)))
    '(0 1 2 3))
(1 3 9 27)
>
{% endhighlight %}

This sort of approach should be familiar to many programmers, even those who
aren't adepts at functional programming. This is a well-known pattern. Erlang
offers another pattern, though: comprehensions.

LFE supports Erlang comprehensions via two macros: ```lc``` for list
comprehensions and ```bc``` for binary comprehensions.

### 3.2.1 List Comprehensions

Let's take a look at an example and then discuss it. Here's a list
comprehension version of our ```map```/```lambda``` combo above:
{% highlight cl %}
> (lc
    ((<- x '(0 1 2 3)))
    (trunc (: math pow 3 x)))
(1 3 9 27)
>
{% endhighlight %}

In Erlang, this would have looked like the following:
{% highlight erlang %}
1> [trunc(math:pow(X,3)) || X <- [0,1,2,3]].
[0,1,8,27]
2>
{% endhighlight %}


{% highlight cl %}
{% endhighlight %}

{% highlight cl %}
{% endhighlight %}

{% highlight cl %}
{% endhighlight %}

{% highlight cl %}
{% endhighlight %}

### 3.2.1 Binary Comprehensions

{% highlight cl %}
{% endhighlight %}

{% highlight cl %}
{% endhighlight %}
