---
layout: user-guide
guide: 1
total_guides: 7
---
# 1 Introduction

## 1.1 Background and Getting Started

This guide assumes the following:

* basic familiarity with Lisp or Lisp dialects
* passing knowledge of Erlang
* a working installation of Erlang and LFE

For those that would like more background on any of these, we recommend the
following resources:
* TBD
* TBD
* The LFE <a href="http://lfe.github.com/quick-start/1.html">Quick Start</a>

## 1.2 About LFE

### 1.2.1 What LFE Isn't

Just to clear the air and set some expectations, here's what you're *not* going
to find in LFE:

* An implementation of Scheme
* An implementation of Common Lisp
* An implementation of Clojure

As such, you will not find the following:
* A Scheme-like single namespace
* CL packages or munged names faking packages
* Access to Java libraries

### 1.2.2 What LFE Is!

Here's what you *can* expect of LFE:

* A proper Lisp-2, based on the features and limitations of the Erlang VM
* Compatible with vanilla Erlang and OTP
* It runs on the standard Erlang VM

Furthermore, as a result of Erlang's influence (and LFE's compatibility with
it), the following hold:
* there is no global data
* data is not mutable
* only the standard Erlang data types are used
* you get pattern matching and guards
* you have access to Erlang functions and modules
* LFE has a compiler/interpreter
* functions with declared arity and fixed number of arguments
* Lisp macros

## 1.3 What to Expect from this Guide

The intent of this guide is to follow the same general pattern that the best
Erlang books do, covering the following (mostly in this order):

**Diving In** (started)
* Operators, numbers
* Atoms and strings
* Working with the shell/REPL
* Binary data and bitstrings

**Lists and Data** (stubbed)
* Tuples and Lists
* List and binary comprehensions
* Records

**Functions and Modules** (stubbed)
* Functions
* LFE-specific functions
* Modules
* Projects

**Checks, Errors, and Tests** (stubbed)
* Pattern matching
* Guards
* Exception handling
* EUnit and TDD

**Processes and Servers** (stubbed)
* Processes
* Clients
* Servers

**External Data** (stubbed)
* Mnesia
* Riak

**Additional Topics** (stubbed)
* Macros
* Writing for multi-core

Some of these will be covered in dedicated tutorials or other in-depth
documents; in those cases, we provide links to that material. If your favorite
topic is not covered above, let us know! We'll try to find a place for it :-)
