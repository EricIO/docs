---
layout: user-guide
guide: 1
total_guides: 4
---
# 2 Diving In

## 2.1 Numbers and Operators

### 2.1.1 Integers and Floats

Let's start with something simple :-) To follow along, fire up your LFE REPL.
Numbers are simple in LFE, just like Erlang:
{% highlight cl %}
> 1
1
> 2
2
> 3
3
>
{% endhighlight %}

Of course, it might be more interesting to look at something like different
bases:
{% highlight cl %}
> #b101010
42
> #o52
42
> #x2a
42
> #36r16
42
>
{% endhighlight %}

With some help from calling an Erlang function, we can work this in reverse,
too:
{% highlight cl %}
> (: erlang integer_to_list 123 2)
"1111011"
{% endhighlight %}
Note that the first argument is the number you want to convert and the second
is the base you want to use (see
<a href="http://erldocs.com/R14B/erts/erlang.html?i=1&search=integer#integer_to_list/2">here</a>
for more details).

### 2.1.2 Arithmatic Operators

But numbers by themselves aren't going to do us much good if we can't operate
on them. The usual apply:
{% highlight cl %}
> (+ 1 2 3 4 5 6)
21
> (- 6 21)
15
> (/ 36 7)
5.142857142857143
> (+ #b101010 #o52 #x2a #36r16)
168
> (* 42 4)
168
> (: erlang integer_to_list (+ #b1001 #b100 #b10) 2)
"1111"
> (div 11 2)
5
> (rem 11 2)
1
> `(,(div 11 2) ,(rem 11 2))
(5 1)
>
{% endhighlight %}

### 2.1.3 Logical Operators

The usual suspects are used as follows:
{% highlight cl %}
> (< 1 2)
true
> (> 1 2)
false
> (>= 2 2)
true
> (=< 3 2)
false
> (>= 3 2)
true
> (== 1 1)
true
> (== 1 1.0)
true
> (/= 1 1)
false
> (/= 2 1)
true
>
{% endhighlight %}

Then there are the operators which also check against type for exact
(non-)equality: {% highlight cl %}
> (=:= 1 1.0)
false
> (=:= 1.0 1.0)
true
> (=/= 1.0 1.0)
false
> (=/= 1 1.0)
true
>
{% endhighlight %}

### 2.1.4 Boolean Operators

{% highlight cl %}
{% endhighlight %}

{% highlight cl %}
{% endhighlight %}

{% highlight cl %}
{% endhighlight %}

